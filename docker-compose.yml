# docker-compose.yml
services:
  frontend:
    # ... (ส่วนอื่นๆ ของ frontend) ...
    build:
      context: ./client
    environment:
      NODE_ENV: production

  server:
    build:
      context: ./server
    # ports: # เอาออกสำหรับ Production
    #   - "4000:4000"
    # volumes: # เอาออกสำหรับ Production
    #   - ./server:/usr/src/app
    environment:
      NODE_ENV: production # เปลี่ยนเป็น production
      # *** แก้ไขตรงนี้: ใช้ตัวแปรจาก .env มาประกอบเป็น DATABASE_URL ***
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      - postgres

  postgres:
    image: postgres:15 # ระบุเวอร์ชัน
    environment:
      # *** แก้ไขตรงนี้: อ้างอิงตัวแปรจาก .env ***
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # ports: # เอาออกสำหรับ Production ถ้าไม่จำเป็น
    #   - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    environment:
      # *** แก้ไขตรงนี้: อ้างอิงตัวแปรจาก .env ***
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:5050" # เปิดไว้ได้ แต่จำกัดที่ Security Group
    depends_on:
      - postgres

  nginx:
    # ... (ส่วนอื่นๆ ของ nginx) ...
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80" # เปลี่ยนเป็น Port 80
    volumes:
       # ตรวจสอบ Path และเพิ่ม :ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - server 

volumes:
  postgres-data: